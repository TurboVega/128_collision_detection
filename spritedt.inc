; File: spritedt.inc
; Purpose: Sprite data definitions
; Copyright (c) 2023 by Curtis Whitley

SPRITE_FIRST_RING_0     = $00 ; 0
SPRITE_LAST_RING_0      = $09 ; 9
SPRITE_FIRST_RING_1     = $0A ; 10
SPRITE_LAST_RING_1      = $19 ; 25
SPRITE_FIRST_RING_2     = $1A ; 26
SPRITE_LAST_RING_2      = $25 ; 37
SPRITE_FIRST_RING_3     = $26 ; 38
SPRITE_LAST_RING_3      = $33 ; 51
SPRITE_FIRST_RING_4     = $34 ; 52
SPRITE_LAST_RING_4      = $43 ; 67
SPRITE_FIRST_RING_5     = $44 ; 68
SPRITE_LAST_RING_5      = $55 ; 85
SPRITE_FIRST_RING_6     = $56 ; 86
SPRITE_LAST_RING_6      = $69 ; 105
SPRITE_FIRST_RING_7     = $6A ; 106
SPRITE_LAST_RING_7      = $7F ; 127

SPRITE_END_RING_0     = (SPRITE_LAST_RING_0 + 1)
SPRITE_END_RING_1     = (SPRITE_LAST_RING_1 + 1)
SPRITE_END_RING_2     = (SPRITE_LAST_RING_2 + 1)
SPRITE_END_RING_3     = (SPRITE_LAST_RING_3 + 1)
SPRITE_END_RING_4     = (SPRITE_LAST_RING_4 + 1)
SPRITE_END_RING_5     = (SPRITE_LAST_RING_5 + 1)
SPRITE_END_RING_6     = (SPRITE_LAST_RING_6 + 1)
SPRITE_END_RING_7     = (SPRITE_LAST_RING_7 + 1)

SPRITE_RING_COUNT_0     = (SPRITE_END_RING_0 - SPRITE_FIRST_RING_0)
SPRITE_RING_COUNT_1     = (SPRITE_END_RING_1 - SPRITE_FIRST_RING_1)
SPRITE_RING_COUNT_2     = (SPRITE_END_RING_2 - SPRITE_FIRST_RING_2)
SPRITE_RING_COUNT_3     = (SPRITE_END_RING_3 - SPRITE_FIRST_RING_3)
SPRITE_RING_COUNT_4     = (SPRITE_END_RING_4 - SPRITE_FIRST_RING_4)
SPRITE_RING_COUNT_5     = (SPRITE_END_RING_5 - SPRITE_FIRST_RING_5)
SPRITE_RING_COUNT_6     = (SPRITE_END_RING_6 - SPRITE_FIRST_RING_6)
SPRITE_RING_COUNT_7     = (SPRITE_END_RING_7 - SPRITE_FIRST_RING_7)

PROJECTILE_COUNT = (SPRITE_RING_COUNT_0)
TARGET_COUNT = (128 - PROJECTILE_COUNT)

SPRITE_TARGET_BITMAP_ADDR = $12300
SPRITE_TARGET_BITMAP_ADDR_SHIFTED = (SPRITE_TARGET_BITMAP_ADDR>>5)

SPRITE_HIT_BITMAP_ADDR = (SPRITE_TARGET_BITMAP_ADDR+SPRITE_BITMAP_SIZE)
SPRITE_HIT_BITMAP_ADDR_SHIFTED = (SPRITE_HIT_BITMAP_ADDR>>5)

SPRITE_DEAD_BITMAP_ADDR = (SPRITE_HIT_BITMAP_ADDR+SPRITE_BITMAP_SIZE)
SPRITE_DEAD_BITMAP_ADDR_SHIFTED = (SPRITE_DEAD_BITMAP_ADDR>>5)

SPRITE_PROJECTILE_BITMAP_ADDR = (SPRITE_DEAD_BITMAP_ADDR+SPRITE_BITMAP_SIZE)
SPRITE_PROJECTILE_BITMAP_ADDR_SHIFTED = (SPRITE_PROJECTILE_BITMAP_ADDR>>5)

SPRITE_INITIAL_X   = 0
SPRITE_INITIAL_Y   = 0

SPRITE_PATH_X_LO              = 0    ; X(7:0)
SPRITE_PATH_X_HI              = 1    ; X(9:8)@(1:0)
SPRITE_PATH_Y_LO              = 2    ; Y(7:0)
SPRITE_PATH_Y_HI              = 3    ; Y(9:8)@(1:0)
SPRITE_PATH_QUAD_MASK         = 4    ; (7:4)
SPRITE_PATH_SPATIAL_MASK_X_LO = 5    ; (8:0)
SPRITE_PATH_SPATIAL_MASK_X_HI = 6    ; (8:0)
SPRITE_PATH_SPATIAL_MASK_Y_LO = 7    ; (8:0)
SPRITE_PATH_SPATIAL_MASK_Y_HI = 8    ; (8:0)
SPRITE_PATH_STRUCT_SIZE       = 9

SPRITE_COLL_MASK_00_NONE    = SPRITE_COLL_MASK_NONE
SPRITE_COLL_MASK_10_LEFT    = SPRITE_COLL_MASK_BIT_4
SPRITE_COLL_MASK_20_RIGHT   = SPRITE_COLL_MASK_BIT_5
SPRITE_COLL_MASK_30_L_R     = (SPRITE_COLL_MASK_10_LEFT|SPRITE_COLL_MASK_20_RIGHT)
SPRITE_COLL_MASK_40_TOP     = SPRITE_COLL_MASK_BIT_6
SPRITE_COLL_MASK_50_L_T     = (SPRITE_COLL_MASK_10_LEFT|SPRITE_COLL_MASK_40_TOP)
SPRITE_COLL_MASK_60_R_T     = (SPRITE_COLL_MASK_20_RIGHT|SPRITE_COLL_MASK_40_TOP)
SPRITE_COLL_MASK_70_L_R_T   = (SPRITE_COLL_MASK_10_LEFT|SPRITE_COLL_MASK_60_R_T)
SPRITE_COLL_MASK_80_BOTTOM  = SPRITE_COLL_MASK_BIT_7
SPRITE_COLL_MASK_90_L_B     = (SPRITE_COLL_MASK_10_LEFT|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_A0_R_B     = (SPRITE_COLL_MASK_20_RIGHT|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_B0_L_R_B   = (SPRITE_COLL_MASK_30_L_R|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_C0_T_B     = (SPRITE_COLL_MASK_40_TOP|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_D0_L_T_B   = (SPRITE_COLL_MASK_50_L_T|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_E0_R_T_B   = (SPRITE_COLL_MASK_60_R_T|SPRITE_COLL_MASK_80_BOTTOM)
SPRITE_COLL_MASK_F0_ALL     = (SPRITE_COLL_MASK_70_L_R_T|SPRITE_COLL_MASK_80_BOTTOM)

sprite_collision_mask: .res 128  ; 4-bit mask for each sprite
quadrant_projectiles:  .res PROJECTILE_COUNT*2 ; array of pointers to sprite structures
